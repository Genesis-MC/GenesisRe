from ps_beet_bolt.bolt_item import transformer, custom_component, event_decorator, camel_case_to_snake_case, before_all, after_all
from genesis:mapping import stat_wrapper_characters, rarity_text_color, categories, rarities, stat_names, category_modifiers
from genesis:utils import add_translation, break_text_into_lines
from tungsten:decorators import _add_tungsten_base, _add_tungsten_components


class GenesisItem:
    @before_all
    @custom_component(component = "stats")
    def stats_handler(item, stats):
        if not stats:
            return
        for stat in stats:
            if stat not in stat_names:
                raise Exception(f'"{stat}" is not a valid stat')

        line = []
        for stat_name in stat_names:
            if stat_name not in stats:
                continue

            color = "white"
            if stats[stat_name] < 0:
                color = "dark_red"

            value_length = len(str(stats[stat_name]))
            wrapper_chars = stat_wrapper_characters[stat_name]
            post_chars = (value_length * "+") + ((value_length - 1) * ("," + wrapper_chars["mid"])) + ("," + wrapper_chars["post"])
            line += [{"text":wrapper_chars["pre"],"font":"genesis:stat","color":"white","italic":false},{"text":str(stats[stat_name]),"font":"genesis:stat","color":color},{"text":post_chars,"font":"genesis:stat"}]

        item.lore = [line,{"text":"","color":"white"}] + item.get('lore', []) #! fix after mc fixes bug

        #! add logic to add stats to custom data
        #! add ability to limit to single slot (after implementing stat reading, that knowledge will help)

    @before_all
    @custom_component(component = "category")
    def category_handler(item, category):
        category_modifier = None
        if len(category) > 1:
            category_modifier = category[-2]
            if category_modifier not in category_modifiers:
                raise Exception(f'"{category_modifier}" is not a valid category modifier')
        main_category = category[-1]
        if main_category not in categories:
            raise Exception(f'Category "{main_category}" is not a valid category')

        line = [
            {"text":"","italic":false},
            {"text":"A","font":"genesis:icon","color":"white"},
            {"translate":f'rarity.genesis.{item.rarity}',"color":rarity_text_color[item.rarity]},
            {"text":" ","color":"white"}, #! "color" is added to avoid "optimization". The optimization causes a bug in the macro. This can likely be removed if the bug gets fixed.
        ]
        if category_modifier:
            line += [{"translate":f'category_modifier.genesis.{category_modifier}',"color":rarity_text_color[item.rarity]}, {"text":" ","color":"white"}] #!
        line.append({"translate":f'category.genesis.{main_category}',"color":rarity_text_color[item.rarity]})
        item.lore = [line] + item.get("lore", [])

    @after_all
    @transformer(component = "rarity")
    def rarity_transformer(item, rarity):
        if rarity not in rarities:
            raise Exception(f'Rarity "{rarity}" is not a valid rarity')
        if rarity in ["legendary","mythical","transcendent"]:
            return "epic"
        return rarity

    @transformer(component = "item_name")
    def item_name_transformer(item, item_name):
        if type(item_name) != tuple or type(item_name[0]) != str or type(item_name[1]) != dict:
            raise Exception(f'"{item_name}" is not a valid item name; has to be ("<name>", {{<style>}})')
        trans_string = f'item.{item.namespace}.{item.id}'
        add_translation(trans_string, item_name[0])
        return {"translate":trans_string} | item_name[1]

    @after_all
    @custom_component(component = "passives")
    def passives_handler(item, passives):
        if not passives:
            return
        pre_line = []
        for passive in passives:
            passive_name_id = camel_case_to_snake_case(passive["name"])
            trans_key = f'item.{item.namespace}.{item.id}.{passive_name_id}'
            add_translation(trans_key, passive["name"])
            item.merge(
                "lore",
                pre_line +
                [
                    [{"text":"‚ùÇ","color":rarity_text_color["transcendent"],"italic":false},{"text":" ","color":"white"},{"translate":trans_key,"color":"gold"}], #! fix after mc fixes bug
                    {"translate":"text.genesis.passive_ability","color":"dark_gray"},
                ] +
                break_text_into_lines(
                    passive["description"],
                    f'item.{item.namespace}.{item.id}.{passive_name_id}'
                )
            )
            pre_line = [{"text":"","color":"white"}] #! fix when fix
