from ps_beet_bolt.bolt_item import transformer, custom_component, event_decorator, before_all, after_all
from genesis:mapping import stat_wrapper_characters, rarity_text_color, categories, rarities, stat_names, category_modifiers, slots, stat_attribute_to_score
from genesis:utils import add_translation, break_text_into_lines, camel_case_to_snake_case
from tungsten:decorators import _add_tungsten_base, _add_tungsten_components


class GenesisItem:
    @before_all
    @custom_component(component = "stats")
    def stats_handler(item, stats):
        if not stats:
            return
        slot = stats[0]
        if slot not in slots:
            raise Exception(f'"{slot}" is not a valid slot')
        stats = stats[1]
        for stat in stats:
            if stat not in stat_names:
                raise Exception(f'"{stat}" is not a valid stat')

        line = []
        # Go through all stats in order and add lore and attributes if they are included
        for stat_name in stat_names:
            if stat_name not in stats:
                continue

            # Add attribute modifiers
            if stat_name in stat_attribute_to_score:
                amount = (stats[stat_name] / stat_attribute_to_score[stat_name]["ratio"])
                if stat_name == "physical_power" and slot == "mainhand":
                    amount -= 1 # Reduce damage attribute by fist damage

                item.merge("attribute_modifiers", [{
                    "type": (stat_attribute_to_score[stat_name]["attribute"]),
                    "id": f'{item.namespace}:{slot}/{item.id}',
                    "amount": amount,
                    "operation": "add_value",
                    "slot": slot,
                }])

            # Add to lore line
            color = "white"
            if stats[stat_name] < 0:
                color = "red"

            value_length = len(str(stats[stat_name]))
            wrapper_chars = stat_wrapper_characters[stat_name]
            post_chars = (value_length * "+") + ((value_length - 1) * ("," + wrapper_chars["mid"])) + ("," + wrapper_chars["post"])
            line += [{"text":wrapper_chars["pre"],"font":"genesis:stat","color":"white","italic":false},{"text":str(stats[stat_name]),"font":"genesis:stat","color":color},{"text":post_chars,"font":"genesis:stat"}]

        item.lore = [line,""] + item.get('lore', [])

        # Add tungsten components
        _add_tungsten_base()
        _add_tungsten_components(item, slot)
        item.max_stack_size = 1

        # Add stats to custom data
        item.merge("custom_data", {"genesis": {"stats": {slot: stats}}})

    @before_all
    @custom_component(component = "category")
    def category_handler(item, category):
        category_modifier = None
        if len(category) > 1:
            category_modifier = category[-2]
            if category_modifier and category_modifier not in category_modifiers:
                raise Exception(f'"{category_modifier}" is not a valid category modifier')
        main_category = category[-1]
        if main_category not in categories:
            raise Exception(f'Category "{main_category}" is not a valid category')

        line = [
            {"text":"","italic":false},
            {"text":"A","font":"genesis:icon","color":"white"},
            {"translate":f'rarity.genesis.{item.rarity}',"color":rarity_text_color[item.rarity]},
            " ",
        ]
        if category_modifier:
            line += [{"translate":f'category_modifier.genesis.{category_modifier}',"color":rarity_text_color[item.rarity]},{"text":" ","color":"white"}] #!
        line.append({"translate":f'category.genesis.{main_category}',"color":rarity_text_color[item.rarity]})
        item.lore = [line] + item.get("lore", [])

        clean_categories = [main_category]
        if category_modifier:
            clean_categories.append(category_modifier)
        if len(category) > 2:
            clean_categories += category[:-2]
        item.merge("custom_data", {"genesis": {"categories": clean_categories}})

    @after_all
    @transformer(component = "rarity")
    def rarity_transformer(item, rarity):
        if rarity not in rarities:
            raise Exception(f'Rarity "{rarity}" is not a valid rarity')
        if rarity in ["legendary","mythical","transcendent"]:
            return "epic"
        return rarity

    @transformer(component = "item_name")
    def item_name_transformer(item, item_name):
        if type(item_name) != tuple or type(item_name[0]) != str or type(item_name[1]) != dict:
            raise Exception(f'"{item_name}" is not a valid item name; has to be ("<name>", {{<style>}})')
        trans_string = f'item.{item.namespace}.{item.id}'
        add_translation(trans_string, item_name[0])
        return {"translate":trans_string} | item_name[1]

    @after_all
    @custom_component(component = "passives")
    def passives_handler(item, passives):
        if not passives:
            return
        pre_line = []
        for passive in passives:
            passive_name_id = camel_case_to_snake_case(passive["name"])
            trans_key = f'item.{item.namespace}.{item.id}.{passive_name_id}'
            add_translation(trans_key, passive["name"])
            item.merge(
                "lore",
                pre_line +
                [
                    [{"text":"‚ùÇ","color":rarity_text_color["transcendent"],"italic":false}," ",{"translate":trans_key,"color":"gold"}],
                    {"translate":"text.genesis.passive_ability","color":"dark_gray"},
                ] +
                break_text_into_lines(
                    passive["description"],
                    f'item.{item.namespace}.{item.id}.{passive_name_id}'
                )
            )
            pre_line = [""]
