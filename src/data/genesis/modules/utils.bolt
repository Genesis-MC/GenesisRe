from ps_beet_bolt.bolt_item import camel_case_to_snake_case
from genesis:mapping import char_width
from beet import Language


def add_translation(key: str, value: str):
    lang = ctx.assets.languages.get("genesis:en_us", {data:{}}).data
    lang[key] = value
    ctx.assets.languages["genesis:en_us"] = Language(lang)


def break_text_into_lines(text: str, trans_base: str):
    out = []
    line_index = 0
    line_length = char_width[text[0]]
    passive_line = text[0]
    for i in range(len(text)-1):
        if (line_length + char_width[text[i+1]]) > 200:
            overflow = ""
            while passive_line[-1] is not ' ':
                overflow = passive_line[-1] + overflow
                passive_line = passive_line[:-1]
            passive_line = passive_line[:-1]

            trans_key = f'{trans_base}.{line_index}'
            add_translation(trans_key, passive_line)
            out.append({"translate":trans_key,"color":"gray","italic":false})
            line_length = 0
            line_index += 1
            passive_line = overflow

        line_length += char_width[text[i+1]]
        passive_line += text[i+1]
    if passive_line:
        trans_key = f'{trans_base}.{line_index}'
        add_translation(trans_key, passive_line)
        out.append({"translate":trans_key,"color":"gray","italic":false})
    return out


def add_loot_table(item):
    loot_table f'{item.namespace}:item/{item.category[-1]}/{item.id}' {
        "pools": [{"rolls": 1,"entries": [{
            "type": "minecraft:item",
            "name": f'minecraft:{item.base_item}',
            "functions": [{"function": "minecraft:set_components","components": item.components}]
        }]}]
    }


def add_custom_recipe(recipe: list[list], output):
    command = "execute "
    slot = 2
    for line in recipe:
        for item in line:
            if item == None:
                command += f'unless items block ~ ~-1 ~ container.{slot} * '
            elif type(item) == str:
                command += f'if items block ~ ~-1 ~ container.{slot} {item} '
            else:
                # assume item is bolt-item
                command += f'if items block ~ ~-1 ~ container.{slot} {item.base_item}[custom_data~{{bolt-item:{{id:"{item.namespace}:{item.id}"}}}}] '
            slot += 1
        slot += 6
    if type(output) == str:
        command += f'run return run item replace block ~ ~-1 ~ container.15 with {output}'
    else:
        # assume item is bolt-item
        loot_table = {"pools": [{"rolls": 1,"entries": [{"type": "minecraft:item","name": f'minecraft:{output.base_item}',"functions": [{"function": "minecraft:set_components","components": output.components}]}]}]}
        command += f'run return run loot replace block ~ ~-1 ~ container.15 loot {loot_table}'
    prepend function genesis:crafter/recipes:
        raw command
