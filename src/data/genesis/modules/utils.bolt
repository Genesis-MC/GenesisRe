from ps_beet_bolt.bolt_item import camel_case_to_snake_case
from genesis:mapping import char_width
from beet import Language


def add_translation(key: str, value: str):
    lang = ctx.assets.languages.get("genesis:en_us", {data:{}}).data
    lang[key] = value
    ctx.assets.languages["genesis:en_us"] = Language(lang)
    return key


def break_text_into_lines(text: str, trans_base: str, italic = False, color = "gray"):
    out = []
    line_index = 0
    line_length = char_width[text[0]]
    line = text[0]
    for i in range(len(text)-1):
        if (line_length + char_width[text[i+1]]) > 200:
            overflow = ""
            while line[-1] is not ' ':
                overflow = line[-1] + overflow
                line = line[:-1]
            line = line[:-1]

            trans_key1 = f'{trans_base}.{line_index}'
            add_translation(trans_key1, line)
            out.append({"translate":trans_key1,"color":color,"italic":italic})
            line_length = 0
            line_index += 1
            line = overflow

        line_length += char_width[text[i+1]]
        line += text[i+1]
    if line:
        trans_key2 = f'{trans_base}.{line_index}'
        add_translation(trans_key2, line)
        out.append({"translate":trans_key2,"color":color,"italic":italic})
    return out


def add_loot_table(item):
    loot_table f'{item.namespace}:item/{item.category[-1]}/{item.id}' {
        "pools": [{"rolls": 1,"entries": [{
            "type": "minecraft:item",
            "name": f'minecraft:{item.base_item}',
            "functions": [{"function": "minecraft:set_components","components": item.components}]
        }]}]
    }
    return item


constants = []
def constant(n):
    global constants
    if n not in constants:
        constants.append(n)
        append function genesis:load:
            scoreboard players set f'#{n}' genesis n
    return f'#{n}'
